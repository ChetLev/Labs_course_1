#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <cctype>

bool isPalindrome(const std::string& word) {
    int left = 0;
    int right = word.size() - 1;
    while (left < right) {
        if (word[left] != word[right]) {
            return false;
        }
        left++;
        right--;
    }
    return true;
}

bool hasPalindromes(const std::vector<std::string>& words) {
    for (const auto& word : words) {
        if (word.length() > 1 && isPalindrome(word)) {
            return true;
        }
    }
    return false;
}

std::string duplicateVowels(const std::string& word) {
    std::string result;
    for (char c : word) {
        result += c;
        if (std::string("aeiouAEIOU").find(c) != std::string::npos) {
            result += c;
        }
    }
    return result;
}

int countConsonants(const std::string& word) {
    int count = 0;
    for (char c : word) {
        if (std::isalpha(c) && std::string("aeiouAEIOU").find(c) == std::string::npos) {
            count++;
        }
    }
    return count;
}

int main() {
    std::string input;
    std::getline(std::cin, input);

    std::istringstream iss(input);
    std::vector<std::string> words;
    std::string word;

    while (iss >> word) {
        words.push_back(word);
    }

    if (hasPalindromes(words)) {
        
        for (auto& w : words) {
            w = duplicateVowels(w);
        }
        
        
        std::sort(words.rbegin(), words.rend());
        
        for (const auto& w : words) {
            std::cout << w << " ";
        }
    } else {
        
        std::sort(words.begin(), words.end(), [](const std::string& a, const std::string& b) {
            return countConsonants(a) > countConsonants(b);
        });
        
        for (const auto& w : words) {
            std::cout << w << " ";
        }
    }

    return 0;
}
